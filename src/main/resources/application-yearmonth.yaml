## 配置根据yearmonth是拆分表
spring:
  shardingsphere:
    # 参数配置，显示sql
    props:
      sql:
        show: true
    # 配置数据源
    datasource:
      # 给每个数据源取别名
      names: ds0,ds1
      # 给master ds1配置数据库连接信息
      ds0:
        # 配置druid数据库源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:13311/ksd_order_db?useUnicode=true&characterEncoding=utf8
        username: root
        password: 123456
        maxPoolSize: 100
        minPoolSize: 5
      # 配置slave
      ds1:
        # 配置druid数据库源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:13312/ksd_order_db?useUnicode=true&characterEncoding=utf8
        username: root
        password: 123456
        maxPoolSize: 100
        minPoolSize: 5
    # 配置sharding
    sharding:
      # 默认数据源，主要用于写，注意一定要配置读写分离
      # 如果不配置，那就会把所有节点都当作slave节点
      default-data-source-name: ds0
      # 配置分表的规则
      tables:
        # ksd_user 逻辑表名
        ksd_user_order:
          # 数据节点：${1..3}.collect{t -> t.toString().padLeft(2,'0')}的意思是给月份用0左补全两位
          actual-data-nodes: ds$->{0..1}.ksd_user_order_$->{2021..2022}${(1..3).collect{t->t.toString().padLeft(2,'0')}}
          # 分布式主键
          key-generator:
              column: order_id
              type: SNOWFLAKE
          # 拆分库策略
          database-strategy:
            inline:
              # 分片字段
              sharding-column: order_id
              # 分片算法表达式
              algorithm-expression: ds$->{order_id % 2}
          # 分表策略
          table-strategy:
#            inline:
#              # 分片字段
#              sharding-column: yearmonth
#              # 分片算法表达式
#              algorithm-expression: ksd_user_order_$->{yearmonth}
              stand:
                # 分片字段
                sharding-column: yearmonth
                # 分片算法表达式
                preciseAlgorithmClassName: com.wyb.shardingjdbc.config.YearMonthShardingAlgorithm
